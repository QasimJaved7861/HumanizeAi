<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Free AI Humanizer</title>
    <!-- Material Design Lite -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css">
    <style>
        .detection-bar {
            background: linear-gradient(90deg, #4CAF50 0%, #FFC107 50%, #F44336 100%);
            height: 8px;
            border-radius: 4px;
            margin: 15px 0;
        }
        .result-box {
            border-left: 4px solid #2196F3;
            padding: 15px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="mdl-layout mdl-js-layout mdl-layout--fixed-header">
        <header class="mdl-layout__header">
            <div class="mdl-layout__header-row">
                <span class="mdl-layout-title">AI Humanizer Pro</span>
            </div>
        </header>

        <main class="mdl-layout__content">
            <div class="page-content">
                <!-- Ad Slot 1 -->
                <div class="ad-slot" id="adTop"></div>

                <div class="mdl-grid">
                    <div class="mdl-cell mdl-cell--8-col">
                        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                            <textarea class="mdl-textfield__input" id="inputText" rows="8"></textarea>
                            <label class="mdl-textfield__label" for="inputText">Enter text to humanize...</label>
                        </div>
                        
                        <button onclick="processText()" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored">
                            <i class="material-icons">auto_fix_high</i> Humanize Text
                        </button>
                    </div>
                </div>

                <!-- Ad Slot 2 -->
                <div class="ad-slot" id="adMiddle"></div>

                <div id="resultSection" style="display: none;">
                    <div class="result-box">
                        <div id="outputText"></div>
                        <button onclick="copyText()" class="mdl-button mdl-js-button">
                            <i class="material-icons">content_copy</i> Copy
                        </button>
                    </div>
                    
                    <h6>AI Detection Score:</h6>
                    <div class="detection-bar">
                        <div id="detectorProgress" style="height: 100%; width: 0%; background: #2196F3;"></div>
                    </div>
                    <div id="aiScore"></div>
                </div>

                <!-- Ad Slot 3 -->
                <div class="ad-slot" id="adBottom"></div>
            </div>
        </main>
    </div>

    <!-- Free AI Models -->
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.18.0/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelr.net/npm/@tensorflow-models/universal-sentence-encoder@1.3.3"></script>
    <script src="https://cdn.jsdelivr.net/npm/compromise@14.6.0/builds/compromise.min.js"></script>

    <script>
        let model;
        
        async function loadModels() {
            model = await tf.loadGraphModel(
                'https://storage.googleapis.com/tfjs-models/tfjs/transformer_paraphraser_v1/model.json'
            );
        }

        async function humanizeText(text) {
            // Client-side paraphrasing using TensorFlow.js
            const embeddings = await model.embed(text);
            const paraphrased = await model.predict(embeddings);
            return paraphrased;
        }

        async function detectAIScore(text) {
            // Client-side detection using GLTR (Giant Language Model Test Room)
            const response = await fetch(`https://gltr.io/api/analyze?text=${encodeURIComponent(text)}`);
            const data = await response.json();
            const score = data.total_logprob > 50 ? 90 : data.total_logprob;
            return Math.min(score, 100);
        }

        async function processText() {
            const input = document.getElementById('inputText').value;
            
            // Step 1: Humanize text
            const humanized = await humanizeText(input);
            document.getElementById('outputText').innerText = humanized;
            
            // Step 2: Detect AI score
            const score = await detectAIScore(humanized);
            document.getElementById('detectorProgress').style.width = `${score}%`;
            document.getElementById('aiScore').innerHTML = `
                ${score}% Human-like | ${100 - score}% AI-like
            `;
            
            document.getElementById('resultSection').style.display = 'block';
        }

        function copyText() {
            navigator.clipboard.writeText(document.getElementById('outputText').innerText);
        }

        // Initialize when page loads
        window.onload = loadModels;
    </script>

    <!-- Ad Integration (Add your AdSense code here) -->
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-XXXXXXXXXXXXXXXX"
     crossorigin="anonymous"></script>
</body>
</html>
